--- a/plugins/opengl/include/opengl/opengl.h
+++ b/plugins/opengl/include/opengl/opengl.h
@@ -582,6 +582,17 @@
 
 extern GLScreenPaintAttrib defaultScreenPaintAttrib;
 
+namespace compiz
+{
+namespace opengl
+{
+namespace internal
+{
+class DriverWorkaroundQuery;
+}
+}
+}
+
 class GLScreen;
 class GLFramebufferObject;
 class GLScreenInterface;
@@ -774,6 +785,13 @@
 
 	bool glInitContext (XVisualInfo *);
 
+	/**
+	 * This is only meant to be used internally, here to avoid unnecessarily
+	 * breaking the API and ABI. Fetch any driver workarounds in place
+	 */
+	const compiz::opengl::internal::DriverWorkaroundQuery &
+	fetchDriverWorkarounds ();
+
 	WRAPABLE_HND (0, GLScreenInterface, bool, glPaintOutput,
 		      const GLScreenPaintAttrib &, const GLMatrix &,
 		      const CompRegion &, CompOutput *, unsigned int);
--- a/plugins/opengl/src/privates.h
+++ b/plugins/opengl/src/privates.h
@@ -47,6 +47,24 @@
 
 extern CompOutput *targetOutput;
 
+namespace compiz
+{
+namespace opengl
+{
+namespace internal
+{
+class DriverWorkaroundQuery
+{
+    public:
+
+	virtual ~DriverWorkaroundQuery () {};
+
+	virtual bool unsafeForExternalBinds () const = 0;
+};
+}
+}
+}
+
 class GLDoubleBuffer :
     public compiz::opengl::DoubleBuffer
 {
@@ -123,6 +141,7 @@
 class PrivateGLScreen :
     public ScreenInterface,
     public compiz::composite::PaintHandler,
+    public compiz::opengl::internal::DriverWorkaroundQuery,
     public OpenglOptions
 {
     public:
@@ -207,6 +226,7 @@
 	std::vector<GLTexture::BindPixmapProc> bindPixmap;
 	bool hasCompositing;
 	bool commonFrontbuffer;
+	bool sharedMemoryTFP;
 	bool incorrectRefreshRate; // hack for NVIDIA specifying an incorrect
 				   // refresh rate, causing us to miss vblanks
 
@@ -226,6 +246,10 @@
 
 	mutable CompString prevRegex;
 	mutable bool       prevBlacklisted;
+
+    private:
+
+	bool unsafeForExternalBinds () const;
 };
 
 class PrivateGLWindow :
--- a/plugins/opengl/src/screen.cpp
+++ b/plugins/opengl/src/screen.cpp
@@ -67,6 +67,7 @@
 
 
 using namespace compiz::opengl;
+namespace cglint = compiz::opengl::internal;
 
 namespace GL {
     #ifdef USE_GLES
@@ -359,6 +360,18 @@
 #endif
 
 bool
+PrivateGLScreen::unsafeForExternalBinds () const
+{
+    return sharedMemoryTFP;
+}
+
+const cglint::DriverWorkaroundQuery &
+GLScreen::fetchDriverWorkarounds ()
+{
+    return *priv;
+}
+
+bool
 GLScreen::glInitContext (XVisualInfo *visinfo)
 {
 #ifndef USE_GLES
@@ -660,6 +673,7 @@
 
     priv->commonFrontbuffer = true;
     priv->incorrectRefreshRate = false;
+    priv->sharedMemoryTFP = false;
     if (glRenderer != NULL && strstr (glRenderer, "on llvmpipe"))
     {
 	/*
@@ -680,6 +694,18 @@
 	priv->incorrectRefreshRate = true;
     }
 
+    if (glVendor != NULL && strstr (glVendor, "Humper"))
+    {
+	/*
+	 * VirtualBox uses XShm/XCopyArea in order to implement
+	 * texture_from_pixmap. Because of this, they require
+	 * a second X connection to track damage events and
+	 * changes to the pixmap, and this is incompatible with
+	 * taking a server grab on when querying and binding
+	 * externally managed pixmaps */
+	priv->sharedMemoryTFP = true;
+    }
+
     if (strstr (glExtensions, "GL_ARB_texture_non_power_of_two"))
 	GL::textureNonPowerOfTwo = true;
     GL::textureNonPowerOfTwoMipmap = GL::textureNonPowerOfTwo;
--- a/plugins/opengl/src/texture.cpp
+++ b/plugins/opengl/src/texture.cpp
@@ -41,6 +41,7 @@
 #include "glx-tfp-bind.h"
 
 namespace cgl = compiz::opengl;
+namespace cglint = compiz::opengl::internal;
 
 #ifdef USE_GLES
 std::map<Damage, EglTexture*> boundPixmapTex;
@@ -648,6 +649,13 @@
         !GL::textureFromPixmap)
 	return GLTexture::List ();
 
+    GLScreen *gs = GLScreen::get (screen);
+    const cglint::DriverWorkaroundQuery &query (gs->fetchDriverWorkarounds ());
+
+    if (query.unsafeForExternalBinds () &&
+	source == cgl::ExternallyManaged)
+	return GLTexture::List ();
+
     GLTexture::List   rv (1);
     TfpTexture        *tex = NULL;
     unsigned int      target = 0;
