## Description: add some description
## Origin/Author: add some origin or author
## Bug: bug URL
Index: compiz-0.9.2.1+glibmainloop4/plugins/bailer/CMakeLists.txt
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ compiz-0.9.2.1+glibmainloop4/plugins/bailer/CMakeLists.txt	2011-01-25 13:31:48.235567002 +0100
@@ -0,0 +1,5 @@
+find_package (Compiz REQUIRED)
+
+include (CompizPlugin)
+
+compiz_plugin (bailer)
Index: compiz-0.9.2.1+glibmainloop4/plugins/bailer/bailer.xml.in
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ compiz-0.9.2.1+glibmainloop4/plugins/bailer/bailer.xml.in	2011-01-25 13:31:48.235567002 +0100
@@ -0,0 +1,82 @@
+<compiz>
+    <plugin name="bailer" useBcop="true">
+    <_short>Bailer</_short>
+    <_long>Take decisive action if something is affecting the experience</_long>
+    <category>Utility</category>
+    <deps>
+        <relation type="before">
+            <plugin>composite</plugin>
+            <plugin>opengl</plugin>
+        </relation>
+    </deps>
+	<options>
+	    <option name="fatal_fallback_mode" type="int">
+		<_short>Fatal fallback mode</_short>
+		<_long>How best to handle a fatal fallback</_long>
+		<min>0</min>
+		<max>3</max>
+		<default>2</default>
+		<desc>
+		    <value>0</value>
+		    <_name>No action</_name>
+		</desc>
+		<desc>
+		    <value>1</value>
+		    <_name>Reduced functionality mode</_name>
+		</desc>
+		<desc>
+		    <value>2</value>
+		    <_name>Detect session fallback</_name>
+		</desc>
+		<desc>
+		    <value>3</value>
+		    <_name>Execute custom fallback</_name>
+		</desc>
+	    </option>
+	    <option name="custom_fallback_window_manager" type="string">
+		<_short>Custom fallback window manager command</_short>
+		<_long>Command to execute when selecting to do a custom fallback</_long>
+	    </option>
+	    <option name="custom_alternative_shell" type="string">
+		<_short>Custom alternative shell command</_short>
+		<_long>If compiz is providing a shell and it can't load, an alternative shell will be launched. This is to override the alternative shell detection</_long>
+	    </option>
+	    <option name="poor_performance_fallback" type="int">
+		<_short>Poor performance fallback</_short>
+		<_long>What do do when plugins indicate that performance is reading poor levels</_long>
+		<desc>
+		    <value>0</value>
+		    <_name>No action</_name>
+		</desc>
+		<desc>
+		    <value>1</value>
+		    <_name>Launch fatal fallback</_name>
+		</desc>
+		<desc>
+		    <value>2</value>
+		    <_name>Unload a custom list of plugins</_name>
+		</desc>
+		<desc>
+		    <value>3</value>
+		    <_name>Reduced functionality mode</_name>
+		</desc>
+		<min>0</min>
+		<max>2</max>
+		<default>0</default>
+	    </option>
+	    <option name="bad_performance_threshold" type="int">
+		<_short>Bad performance threshold</_short>
+		<_long>How much bad performance to tolerate before taking decisive action</_long>
+		<min>0</min>
+		<max>300</max>
+		<default>50</default>
+	    </option>
+	    <option name="bad_plugins" type="list">
+		<_short>Bad Plugins</_short>
+		<_long>Plugins to unload in case the session is being impacted</_long>
+		<default></default>
+		<type>string</type>
+	    </option>
+	</options>
+    </plugin>
+</compiz>
Index: compiz-0.9.2.1+glibmainloop4/plugins/bailer/src/bailer.cpp
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ compiz-0.9.2.1+glibmainloop4/plugins/bailer/src/bailer.cpp	2011-01-25 13:34:27.007567000 +0100
@@ -0,0 +1,277 @@
+/**
+ * Compiz bailer plugin
+ *
+ * bailer.cpp
+ *
+ * Copyright (c) 2010 Canonical Ltd
+ *
+ * This plugin should be thought of as a "manager" plugin for compiz
+ * it handles signals by various other plugins (eg handleCompizEvent)
+ * and then takes decisive action on those signals when appropriate
+ * based on the configuration.
+ *
+ * For example, it will handle signals from plugins that someone is
+ * doing something stupid and terminate the offending plugin,
+ * or handle signals that performance is poor, wait a little while
+ * and then take decisive action to restore the user experience.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * AUTHORS: Didier Roche <didrocks@ubuntu.com>
+ * 	    Sam Spilsbury <sam.spilsbury@canonical.com>
+ */
+
+#include "bailer.h"
+
+COMPIZ_PLUGIN_20090315 (bailer, BailerPluginVTable);
+
+static CompString reducedFunctionalityUnload[] = {"opengl", "composite"};
+static CompString compizShellUnload[] = {"unityshell"};
+static CompString noARBUnload[] = {"colorfilter", "blur", "bicubic", "water", "reflex"};
+static CompString noComplexUnload[] = {"blur", "water"};
+
+/*
+ * BailerScreen::detectFallbackWM ()
+ *
+ * Reads the session environment propeties and tries to detect
+ * which fallback window manager would be appropriate to launch here
+ *
+ * returns: a CompString with the fallback wm command
+ *
+ */
+CompString
+BailerScreen::detectFallbackWM ()
+{
+    if (getenv ("KDE_FULL_SESSION") != NULL)
+	return "kwin --replace";
+    else if (getenv ("GNOME_DESKTOP_SESSION_ID") != NULL)
+	return "metacity --replace";
+    else if (access ("/usr/bin/xfwm4", F_OK) == 0)
+	return "xfwm4 --replace";
+
+    return "";
+}
+
+/*
+ * BailerScreen::ensureShell
+ *
+ * Because compiz might be providing the panel shell or whatever
+ * (eg, Ubuntu's Unity plugin), we need to ensure that our desktop
+ * services come back when compiz goes away or when the Compiz
+ * shell(s) can't run.
+ *
+ */
+void
+BailerScreen::ensureShell ()
+{
+
+    CompString alternative_shell = optionGetCustomAlternativeShell();
+    compLogMessage ("bailer",
+			        CompLogLevelInfo,
+			        "Ensuring a shell for your session");
+
+    /* FIXME: will be nicer to get the detection module at start and so, not loading plugin rather
+                   than unloading them, isn't it? */    
+    unloadPlugins (compizShellUnload);    
+    
+    if (strcmp (alternative_shell.c_str (), "") != 0)
+    {
+	compLogMessage ("bailer",
+			            CompLogLevelInfo,
+			            "Custom shell set: no detection magic: %s", alternative_shell.c_str ());
+	screen->runCommand (alternative_shell.c_str ());
+	return;
+    }
+    
+    if (getenv ("GDMSESSION") != NULL && (strcmp (getenv ("GDMSESSION"), "gnome") == 0)) {
+	screen->runCommand ("gnome-panel");
+    }
+}
+
+/*
+ * BailerScreen::doUnload
+ *
+ * Unload given plugins at the top of the main loop
+ *
+ */
+bool
+BailerScreen::doUnload (std::vector <CompString> plugins)
+{
+    foreach (CompString &plugin, plugins)
+    {
+	CompPlugin *p = CompPlugin::find (plugin.c_str ());
+
+	if (p)
+	    (*loaderUnloadPlugin) (p);
+    }
+
+    return false;
+}
+
+/*
+ * BailerScreen::unloadPlugins
+ *
+ * Add plugins to the unload timer so that we don't unload stuff
+ * during wrapped function calls
+ *
+ */
+void
+BailerScreen::unloadPlugins (CompString *plugins)
+{
+    std::vector <CompString> pv (plugins, plugins + sizeof (plugins) / sizeof (*plugins));
+
+    mSafeUnloadTimer.stop ();
+    mSafeUnloadTimer.setCallback (boost::bind (&BailerScreen::doUnload, this, pv));
+    mSafeUnloadTimer.start ();
+}
+
+void
+BailerScreen::unloadPlugins (std::vector <CompString> plugins)
+{
+    mSafeUnloadTimer.stop ();
+    mSafeUnloadTimer.setCallback (boost::bind (&BailerScreen::doUnload, this, plugins));
+    mSafeUnloadTimer.start ();
+}
+
+
+/*
+ * BailerScreen::doFallback ()
+ *
+ * Do the actual fallback if a plugin asks for it
+ *
+ */
+void
+BailerScreen::doFatalFallback ()
+{
+    switch (optionGetFatalFallbackMode ())
+    {
+	case BailerOptions::FatalFallbackModeReducedFunctionalityMode:
+	    unloadPlugins (reducedFunctionalityUnload); break;
+	case BailerOptions::FatalFallbackModeDetectSessionFallback:
+	    ensureShell ();
+	    screen->runCommand (detectFallbackWM ().c_str ());
+	    exit (EXIT_FAILURE);
+	    break;
+	case BailerOptions::FatalFallbackModeExecuteCustomFallback:
+	    ensureShell ();
+	    screen->runCommand (optionGetCustomFallbackWindowManager ().c_str ());
+	    exit (EXIT_FAILURE);
+	case BailerOptions::FatalFallbackModeNoAction:
+	default:
+	    break;
+    }
+}
+
+/*
+ * BailerScreen::doPerformanceFallback
+ *
+ * Not as bad as a fatal fallback, but try to recover from bad
+ * performance if a plugin thinks we are not doing so well.
+ *
+ */
+void
+BailerScreen::doPerformanceFallback ()
+{
+    switch (optionGetPoorPerformanceFallback ())
+    {
+	case BailerScreen::PoorPerformanceFallbackLaunchFatalFallback:
+	    doFatalFallback ();
+	    break;
+	case BailerScreen::PoorPerformanceFallbackUnloadACustomListOfPlugins:
+	{
+	    CompOption::Value::Vector vv = optionGetBadPlugins ();
+	    std::vector <CompString> pv;
+
+	    foreach (CompOption::Value &v, vv)
+		pv.push_back (v.s ());
+
+	    unloadPlugins (pv);
+
+	    break;
+	}
+	case BailerScreen::PoorPerformanceFallbackReducedFunctionalityMode:
+	    unloadPlugins (reducedFunctionalityUnload); break;
+	case BailerScreen::PoorPerformanceFallbackNoAction:
+	default:
+	    break;
+    }
+}
+
+/*
+ * BailerScreen::changeSessionType
+ *
+ * Unloads and loads plugins depending on what kind of session we wanted
+ *
+ */
+void
+BailerScreen::changeSessionType (SessionType type)
+{
+    switch (type)
+    {
+	case SessionType2D:
+	    unloadPlugins (reducedFunctionalityUnload);
+	    break;
+	case SessionType3DNoARB:
+	    unloadPlugins (noARBUnload);
+	    break;
+	case SessionType3DNoComplex:
+	    unloadPlugins (noComplexUnload);
+	    break;
+	case SessionType3DFull:
+	default:
+	    break;
+    }
+}
+
+/*
+ * BailerScreen::handleCompizEvent
+ *
+ * Checks the compiz event screen if some plugin is screaming for help
+ *
+ */
+void
+BailerScreen::handleCompizEvent (const char *plugin, const char *event,
+				 CompOption::Vector &options)
+{
+    if (strcmp (plugin, "composite") == 0)
+    {
+	if (strcmp (event, "poor_performance") == 0)
+	{
+	    mPoorPerformanceCount++;
+	    if (mPoorPerformanceCount > optionGetBadPerformanceThreshold ())
+		doPerformanceFallback ();
+	}
+    }
+
+    if (strcmp (event, "fatal_fallback") == 0)
+	doFatalFallback ();
+
+    if (strcmp (event, "ensure_shell") == 0)
+	ensureShell ();
+
+    screen->handleCompizEvent (plugin, event, options);
+}
+
+BailerScreen::BailerScreen (CompScreen *s) :
+    PluginClassHandler <BailerScreen, CompScreen> (s),
+    mPoorPerformanceCount (0)
+{
+    ScreenInterface::setHandler (s);
+}
+
+bool
+BailerPluginVTable::init ()
+{
+    if (!CompPlugin::checkPluginABI ("core", CORE_ABIVERSION))
+	return false;
+
+    return true;
+}
Index: compiz-0.9.2.1+glibmainloop4/plugins/bailer/src/bailer.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ compiz-0.9.2.1+glibmainloop4/plugins/bailer/src/bailer.h	2011-01-25 13:31:48.235567002 +0100
@@ -0,0 +1,86 @@
+/**
+ * Compiz bailer plugin
+ *
+ * bailer.h
+ *
+ * Copyright (c) 2010 Canonical Ltd
+ *
+ * This plugin should be thought of as a "manager" plugin for compiz
+ * it handles signals by various other plugins (eg handleCompizEvent)
+ * and then takes decisive action on those signals when appropriate
+ * based on the configuration.
+ *
+ * For example, it will handle signals from plugins that someone is
+ * doing something stupid and terminate the offending plugin,
+ * or handle signals that performance is poor, wait a little while
+ * and then take decisive action to restore the user experience.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * AUTHORS: Didier Roche <didrocks@ubuntu.com>
+ * 	    Sam Spilsbury <sam.spilsbury@canonical.com>
+ */
+
+#include <core/core.h>
+#include <core/pluginclasshandler.h>
+#include <core/timer.h>
+
+#include "bailer_options.h"
+
+class BailerScreen :
+    public PluginClassHandler <BailerScreen, CompScreen>,
+    public ScreenInterface,
+    public BailerOptions
+{
+    public:
+
+	BailerScreen (CompScreen *);
+
+	void
+	handleCompizEvent (const char *, const char *,
+			   CompOption::Vector &options);
+
+    private:
+
+        typedef enum
+	{
+	    SessionType2D = 0,
+	    SessionType3DNoARB,
+	    SessionType3DNoComplex,
+	    SessionType3DFull
+	} SessionType;
+
+	int mPoorPerformanceCount;
+	CompTimer mSafeUnloadTimer;
+
+	CompString detectFallbackWM ();
+	void ensureShell ();
+
+	void doFatalFallback ();
+	void doPerformanceFallback ();
+
+	void changeSessionType (SessionType);
+
+	void unloadPlugins (CompString *);
+	void unloadPlugins (std::vector <CompString> );
+	bool doUnload (std::vector <CompString>);
+};
+
+#define BAILER_SCREEN(s)					       \
+    BailerScreen *bs = BailerScreen::get (s);
+
+class BailerPluginVTable :
+    public CompPlugin::VTableForScreen <BailerScreen>
+{
+    public:
+
+	bool init ();
+};
Index: compiz-0.9.2.1+glibmainloop4/plugins/detection/CMakeLists.txt
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ compiz-0.9.2.1+glibmainloop4/plugins/detection/CMakeLists.txt	2011-01-25 13:31:48.235567002 +0100
@@ -0,0 +1,5 @@
+find_package (Compiz REQUIRED)
+
+include (CompizPlugin)
+
+compiz_plugin (detection)
Index: compiz-0.9.2.1+glibmainloop4/plugins/detection/detection.xml.in
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ compiz-0.9.2.1+glibmainloop4/plugins/detection/detection.xml.in	2011-01-25 13:31:48.239567002 +0100
@@ -0,0 +1,28 @@
+<compiz>
+    <plugin name="detection" useBcop="true">
+    <_short>Detection</_short>
+    <_long>Do a bit more clever hardware etc detection</_long>
+    <deps>
+	<relation type="before">
+	    <plugin>composite</plugin>
+	    <plugin>opengl</plugin>
+	</relation>
+	<relation type="after">
+	    <plugin>bailer</plugin>
+	</relation>
+    </deps>
+    <category>Utility</category>
+    <options>
+	<option name="detect_bad_pci" type="bool">
+	    <_short>Detect known bad PCI ids</_short>
+	    <_long>Fallback when known bad PCI ids are detected</_long>
+	    <default>true</default>
+	</option>
+	<option name="detect_bad_drivers" type="bool">
+	    <_short>Detect known bad drivers</_short>
+	    <_long>Fallback when known bad drivers are detected</_long>
+	    <default>true</default>
+	</option>
+    </options>
+    </plugin>
+</compiz>
Index: compiz-0.9.2.1+glibmainloop4/plugins/detection/src/detection.cpp
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ compiz-0.9.2.1+glibmainloop4/plugins/detection/src/detection.cpp	2011-01-25 13:31:48.239567002 +0100
@@ -0,0 +1,74 @@
+/**
+ * Compiz detection plugin
+ *
+ * detection.cpp
+ *
+ * Copyright (c) 2010 Canonical Ltd
+ *
+ * This plugin should does some quick extra checks to make sure we
+ * are not running on quirky hardware or drivers.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * AUTHORS: Didier Roche <didrocks@ubuntu.com>
+ * 	    Sam Spilsbury <sam.spilsbury@canonical.com>
+ */
+
+#include "detection.h"
+
+COMPIZ_PLUGIN_20090315 (detection, DetectionPluginVTable);
+
+static CompString HW_accell_blacklisted[] = {
+    "8086:3577", /* Intel 830MG, 845G (LP: #259385) */
+    "8086:2562"
+};
+
+bool
+DetectionScreen::doDetection ()
+{
+    CompOption::Vector o (0);
+
+    /* first, take care about the blacklisted cards */
+    for (unsigned int i = 0; i < 2; i++)
+    {
+	CompString cmd = "lspci -n | grep -q " + HW_accell_blacklisted[i];
+
+	if (system (cmd.c_str ()) == 0 && optionGetDetectBadPci ())
+	{
+	    compLogMessage ("detection",
+			    CompLogLevelFatal,
+			    "Accelerated blacklisted PCI ID %s detected",
+			    HW_accell_blacklisted[i].c_str ());
+
+	    screen->handleCompizEvent ("detection", "fatal_fallback", o);
+	}
+    }
+
+    return false;
+}
+
+DetectionScreen::DetectionScreen (CompScreen *s) :
+    PluginClassHandler <DetectionScreen, CompScreen> (s)
+{
+    CompTimer::CallBack cb = boost::bind (&DetectionScreen::doDetection,
+					  this);
+
+    mDetectionTimer.start (cb, 0, 0);
+}
+
+bool
+DetectionPluginVTable::init ()
+{
+    if (!CompPlugin::checkPluginABI ("core", CORE_ABIVERSION))
+	return false;
+
+    return true;
+}
Index: compiz-0.9.2.1+glibmainloop4/plugins/detection/src/detection.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ compiz-0.9.2.1+glibmainloop4/plugins/detection/src/detection.h	2011-01-25 13:31:48.239567002 +0100
@@ -0,0 +1,52 @@
+/**
+ * Compiz detection plugin
+ *
+ * detection.h
+ *
+ * Copyright (c) 2010 Canonical Ltd
+ *
+ * This plugin should does some quick extra checks to make sure we
+ * are not running on quirky hardware or drivers.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * AUTHORS: Didier Roche <didrocks@ubuntu.com>
+ * 	    Sam Spilsbury <sam.spilsbury@canonical.com>
+ */
+
+#include "core/core.h"
+#include "core/pluginclasshandler.h"
+#include "core/timer.h"
+
+#include "detection_options.h"
+
+class DetectionScreen :
+    public PluginClassHandler <DetectionScreen, CompScreen>,
+    public DetectionOptions
+{
+    public:
+
+	DetectionScreen (CompScreen *);
+
+    private:
+
+	bool doDetection ();
+
+	CompTimer mDetectionTimer;
+};
+
+class DetectionPluginVTable:
+    public CompPlugin::VTableForScreen <DetectionScreen>
+{
+    public:
+
+	bool init ();
+};
